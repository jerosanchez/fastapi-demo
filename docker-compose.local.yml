services:
  api-db:
    image: "${POSTGRES_IMAGE}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ${DOCKER_NETWORK_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: .
      target: migrate
    depends_on:
      api-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - ${DOCKER_NETWORK_NAME}
    # This container will run migrations and exit
  api:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
    depends_on:
      - migrate
    networks:
      - ${DOCKER_NETWORK_NAME}
    env_file:
      - .env

volumes:
  pgdata:


networks:
  internal:
    external: true
    name: ${DOCKER_NETWORK_NAME}
